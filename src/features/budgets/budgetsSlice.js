//* 1 - import createSlice from @reduxjs/toolkit
import { createSlice } from "@reduxjs/toolkit";

export const CATEGORIES = [
  "housing",
  "food",
  "transportation",
  "utilities",
  "clothing",
  "healthcare",
  "personal",
  "education",
  "entertainment",
];

const initialState = CATEGORIES.map((category) => ({
  category: category,
  amount: 0,
}));

/**
  ** 2.1 - Define a variable, budgetSlice, and initialize it with a call to createSlice()

  ** 2.2 - Add a name property to the configuration object and set it equal to 'budgets'

  ** 2.3 - Add an initialState property to the configuration object, and set it equal to 
  **       the variable initialState that we've defined for you

  ** 2.4 - Include a reducers property in the configurations object
*/

const budgetsSlice = createSlice({
  name: "budgets",
  initialState: initialState,
  reducers: {
    /**
     ** 3.1 - Add an editbudget property to the reducers object passed to createSlice()

     ** 3.2 - Set editBudget equal to a case reducer that recieves two arguments
     **       state and action. action.payload will have a category and amount property

     ** 3.3 - editBudget should update the state by finding the budget object whose .category 
     **       value matches action.payload.category and changing with the .amount value to 
     **       action.payload.amount
     */

    editBudget: (state, action) => {
      const { category, amount } = action.payload;
      state.find((budget) => budget.category === category).amount = amount;
    },
  },
});

/**
 ** 4.1 - Delete the stand-alone editBudget. at the bottom of the file budgetSlice.js,
 **       export the editBudget action creator generated by createSlice() and stored
 **       in budgetSlice

 ** 4.2 - Delete the stand-alone budgetsReducer, and update the export default statement
 **       to export the reducer generated by createSlice() and stored in budgetsSlice
 */

export const { editBudget } = budgetsSlice.actions;
export const selectBudgets = (state) => state.budgets;
export default budgetsSlice.reducer;
